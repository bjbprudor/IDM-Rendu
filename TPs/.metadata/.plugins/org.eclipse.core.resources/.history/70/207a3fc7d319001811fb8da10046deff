import java.io.File;
import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.common.util.URI;
import org.xtext.example.mydsl.videoGen.VideoGeneratorModel;

public class MyJavaVideoGen 
{
		
	private String dataFolder;
	private VideoGenHelper helper;
	VideoGeneratorModel videoGen;
	
	public MyJavaVideoGen(String dataPath)
	{
		helper = new VideoGenHelper();
		setDataFolder(dataPath);
	}
	
	/**
	 * Methode de test (a supprimer)
	 * @return
	 */
	public String helloWorld()
	{
		return "hello world ! MyJavaVideoGen est operationnel";
	}
	
	/**
	 * Getter dataFolder
	 * @return
	 */
	public String getDataFolder()
	{
		return dataFolder;
	}
	
	/**
	 * Setter de dataFolder
	 * @param dataPath
	 */
	public void setDataFolder(String dataPath)
	{
		dataFolder = dataPath;
		setVideoGen("");
	}
	
	/**
	 * Recupere tous les .videoGen situé dans le dossier videogens du dossier data
	 * @return
	 */
	public List<String> getAllVideoGen()
	{
		List<String> result = new ArrayList<>();
		try
		{
			// on recupere tous les fichier situe dans le dossier des videogens
			File folder = new File(dataFolder+"/videogens");
			for(String s : folder.list())
			{
				result.add(s);
			}
		}
		catch(Exception ex)
		{
			System.out.println(ex.getMessage());
		}
		
		return result;
	}
	
	/**
	 * change le videogen du generateur
	 * @param videogen le nom du videogen a utiliser
	 * @return true si le changement a reussi, false sinon
	 */
	public boolean setVideoGen(String vidGen)
	{
		boolean res = false;
		File selected = null;
		try
		{
			File folder = new File(dataFolder+"/videogens");
			File[] files = folder.listFiles();
			if(files.length == 0) { throw new Exception("Aucun Fichier n'a été trouvé"); }
			if(vidGen == "") { selected = files[0]; }
			else {
				for(File f : files)
				{
					if(vidGen == f.getName()) { selected = f; res = true; break; }
				}
				if(selected == null) { selected = files[0]; }
			}
			helper.loadVideoGenerator(URI.createURI(selected.getPath()));
			
		}
		catch(Exception ex)
		{
			System.out.println(ex.getMessage());
		}
		
		return res;
	}
	
}
	/*
		VideoGenHelper helper
		VideoGen videoGen

		
		def void GenVideo()
		{
			
		}
			
		def static void GenerateVideo(String vgpath, String outpath, VideoGenHelper helper)
		{
			// 
			val random = new Random()
			
			// videogen obtenu via le fichier vgpath
			val videogen = helper.loadVideoGenerator(URI.createURI(vgpath))
			
			// fichier intermediare pour la generation de la video
			val file = new FileWriter("playlist.txt")	
			file.write("# playlist to concat videos with ffmpeg\n")

			for (video : videogen.medias) 
			{
				if (video instanceof MandatoryVideoSeq) 
				{
					file.write("file '" + video.description.location + "'\n")
				} 
				else if (video instanceof OptionalVideoSeq) 
				{
					val perc = video.description.probability
					if(perc == 0) 
					{ 
						if(random.nextBoolean()) { file.write("file '" + video.description.location + "'\n") }
					}
					else 
					{
						if(random.nextInt(100) < perc) { file.write("file '" + video.description.location + "'\n") }
					}
				}
				else if (video instanceof AlternativeVideoSeq) 
				{							
					file.write("file '" + video.videodescs.get(random.nextInt(video.videodescs.size)).location + "'\n")
				}
			}
			file.close()
			
			var p = Runtime.runtime.exec("cmd /c start cmd.exe /K \" ffmpeg -f concat -safe 0 -i "+
			" playlist.txt -c copy " + outpath + ".mp4 && exit\"")
			p.waitFor
			
		}
			
	


}
*/